---
basePath: "/api/v1"
definitions:
  Assetstore:
    description: Attributes describing a folder in Girder
    properties:
      _accessLevel:
        type: string
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      name:
        type: string
      parentCollection:
        type: string
      parentId:
        type: string
      public:
        type: boolean
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Folder
    type: object
  Collection:
    description: Attributes describing a folder in Girder
    properties:
      _accessLevel:
        type: string
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      name:
        type: string
      parentCollection:
        type: string
      parentId:
        type: string
      public:
        type: boolean
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Folder
    type: object
  File:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  Folder:
    description: Attributes describing a folder in Girder
    properties:
      _accessLevel:
        type: string
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      name:
        type: string
      parentCollection:
        type: string
      parentId:
        type: string
      public:
        type: boolean
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Folder
    type: object
  Group:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  Item:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  Setting:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  Token:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  Upload:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  User:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  containerConfig:
    description: A subset of docker runtime configuration used for Tales
    properties:
      command:
        description: Command to run when the container starts
        type: string
      cpuShares:
        type: string
      environment:
        description: List of environment variables passed to a container
        items:
          description: Environment variable, in the form KEY=val
          type: string
        type: array
      memLimit:
        type: string
      port:
        description: The exposed internal port that is going to be accessbile through
          HTTP(S)
        type: integer
      targetMount:
        description: Path where the Whole Tale filesystem will be mounted
        type: string
      urlPath:
        description: Subpath appended to the randomly generated container URL
        type: string
      user:
        description: Username used inside the running container
        type: string
    title: containerConfig
    type: object
  containerInfo:
    description: A subset of docker info parameters used by Tales
    properties:
      created:
        format: date-time
        type: string
      digest:
        description: Checksum of the successfully built image that was used to run
          this instance.
        type: string
      imageId:
        description: ID of the successfully built image that was used to run this
          instance.
        type: string
      mountPoint:
        type: string
      name:
        type: string
      nodeId:
        type: string
      urlPath:
        type: string
      volumeName:
        type: string
    required:
    - name
    - mountPoint
    - nodeId
    - volumeName
    title: containerInfo
    type: object
  dataMap:
    description: A container with a basic information about a set of external data
      resources.
    example:
      dataId: urn:uuid:42969280-e11c-41a9-92dc-33964bf785c8
      doi: 10.5063/F1Z899CZ
      name: Data from a dynamically downscaled projection of past and future microclimates
        covering North America from 1980-1999 and 2080-2099
      repository: DataONE
      size: 178679
    properties:
      dataId:
        description: External dataset identificator, such as URL.
        type: string
      doi:
        description: Digital Object Identifier
        type: string
      name:
        description: A user-friendly name. Defaults to the name provided by an external
          repository.
        type: string
      repository:
        description: Name of a data repository holding the dataset.
        type: string
      size:
        description: Size of the dataset in bytes.
        type: integer
    required:
    - dataId
    - repository
    - doi
    - name
    - size
    type: object
  dataSet:
    items:
      description: A schema representing data elements used in DMS dataSets
      properties:
        itemId:
          description: ID of a Girder item or a Girder folder
          type: string
        mountPath:
          description: An absolute path where the item/folder are mounted in the EFS
          type: string
      required:
      - itemId
      - mountPath
      title: dataSetItem
      type: object
    title: A list of resources with a corresponding mount points in the ESF
    type: array
  dataset:
    description: Object representing registered data.
    properties:
      _id:
        description: internal unique identifier
        type: string
      _modelType:
        description: Model of the object.
        enum:
        - folder
        - item
        type: string
      created:
        description: The time when the tale was created.
        format: date-time
        type: string
      creatorId:
        description: A unique identifier of the user that created the tale.
        type: string
      description:
        type: string
      identifier:
        description: External, unique identifier
        type: string
      name:
        description: A user-friendly name
        type: string
      provider:
        description: Name of the provider
        enum:
        - DataONE
        - HTTP
        - Globus
        type: string
      size:
        description: Total size of the dataset in bytes.
        type: integer
      updated:
        description: The last time when the tale was modified.
        format: date-time
        type: string
    required:
    - _id
    - _modelType
  fileMap:
    description: A container with a list of filenames and sizes from a DataONE repository.
    example:
      ? 'Doctoral Dissertation Research: Mapping Community Exposure to Coastal Climate
        Hazardsin the Arctic: A Case Study in Alaska''s North Slope'
      : Arctic Slope Shoreline Change Risk Spatial Data Model, 2015-16:
          fileList:
          - science_metadata.xml:
              size: 7577
        Arctic Slope Shoreline Change Susceptibility Spatial Data Model, 2015-16:
          fileList:
          - science_metadata.xml:
              size: 10491
        Local community verification of shoreline change risks along the Alaskan Arctic Oceancoast (North Slope).:
          fileList:
          - science_metadata.xml:
              size: 14250
        North Slope Borough shoreline change risk WebGIS usability workshop.:
          fileList:
          - science_metadata.xml:
              size: 7940
        fileList:
        - science_metadata.xml:
            size: 8961
    properties:
      name:
        description: The name of the data file.
        type: string
      size:
        description: Size of the file in bytes.
        type: integer
    required:
    - name
    - fileList
    type: object
  folder:
    description: Attributes describing a folder in Girder
    properties:
      _accessLevel:
        type: string
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      name:
        type: string
      parentCollection:
        type: string
      parentId:
        type: string
      public:
        type: boolean
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Folder
    type: object
  image:
    description: Object representing a WT Image.
    example:
      _accessLevel: 2
      _id: 5873dcdbaec030000144d233
      _modelType: image
      created: '2017-01-09T18:56:27.262000+00:00'
      creatorId: 18312dcdbaec030000144d233
      description: Jupyter Notebook environment
      name: Jupyter Notebook
      parentId: 'null'
      public: true
      tags:
      - jupyter
      - py3
      updated: '2017-01-10T16:15:17.313000+00:00'
    properties:
      _id:
        description: internal unique identifier
        type: string
      config:
        "$ref": "#/definitions/containerConfig"
      created:
        description: The time when the image was created.
        format: date-time
        type: string
      creatorId:
        description: A unique identifier of the user that created the image.
        type: string
      description:
        type: string
      icon:
        description: A URL with an image icon
        type: string
      iframe:
        description: If 'true', the tale can be embedded in an iframe
        type: boolean
      name:
        description: A user-friendly name
        type: string
      parentId:
        description: ID of a previous version of the Image
        type: string
      public:
        default: true
        description: If set to true the image can be accessed by anyone
        type: boolean
      tags:
        description: A human readable identification of the environment.
        items:
          type: string
        type: array
      updated:
        description: The last time when the image was modified.
        format: date-time
        type: string
    required:
    - _id
    - name
    - tags
    - parentId
  imageInfo:
    description: Attributes describing a Tale image
    properties:
      created:
        format: date-time
        type: string
      digest:
        type: string
      fullName:
        type: string
      jobId:
        type: string
    title: imageInfo
    type: object
  instance:
    example:
      _accessLevel: 2
      _id: 587506670791d3000121b68d
      _modelType: instance
      containerInfo:
        containerId: 397914f6bf9e4d153dd86
        containerPath: user/.../login?token=...
        digest: sha256:198246816212941281ab1243de09c9adbca92
        host: 172.17.0.1
        imageId: 58caa69f00f4d26cbd9fe01d
        mountPoint: "/var/lib/docker/volumes/58caa69f9fcbde0001/_data"
        volumeName: 58ca9fcbde0001df4d26_foo
      created: '2017-04-07T17:04:04.777000+00:00'
      creatorId: 57c099af86ed1d0001733722
      iframe: true
      lastActivity: '2017-04-07T17:04:04.777000+00:00'
      name: test
      status: 0
      taleId: 58caa69f9fcbde0001df4d26
      url: user/hkhHpMloA4Pp/login?token=babf41833c9641a4a92bece48a34e5b7
    title: instance
    properties:
      _accessLevel:
        format: int32
        type: integer
      _id:
        type: string
      _modelType:
        type: string
      containerInfo:
        "$ref": "#/definitions/containerInfo"
      created:
        format: date
        type: string
      creatorId:
        type: string
      iframe:
        description: If "true", instance can be embedded in an iframe
        type: boolean
      lastActivity:
        format: date
        type: string
      name:
        type: string
      status:
        format: int32
        maximum: 2
        minimum: 0
        type: integer
      taleId:
        type: string
      url:
        type: string
    required:
    - _accessLevel
    - _id
    - _modelType
    - containerId
    - containerPath
    - created
    - digest
    - folderId
    - frontendId
    - imageId
    - lastActivity
    - mountPoint
    - status
    - userId
    - when
    type: object
  job:
    description: Attributes describing an item in Girder
    properties:
      _id:
        type: string
      _modelType:
        type: string
      baseParentId:
        type: string
      baseParentType:
        type: string
      created:
        format: date-time
        type: string
      creatorId:
        type: string
      description:
        type: string
      folderId:
        type: string
      name:
        type: string
      size:
        type: integer
      updated:
        format: date-time
        type: string
    title: Upload
    type: object
  publishInfo:
    description: A schema representing publishing information
    properties:
      date:
        description: Date Tale was published.
        format: date-time
        type: string
      pid:
        description: A unique identifier assigned to this tale from a publishing source.
        type: string
      uri:
        description: A URI pointing to the location of the published Tale.
        type: string
    required:
    - pid
    - uri
    - date
    title: publishInfo
    type: object
  string:
    description: A string
    properties:
      value:
        description: Value of the string
        type: string
    title: string
    type: object
  tale:
    description: Object representing a Tale.
    example:
      _accessLevel: 2
      _id: 5c4887409759c200017b2310
      _modelType: tale
      authors:
      - firstName: Kacper
        lastName: Kowalik
        orcid: https://www.orcid.org/0000-0003-1709-3744
      - firstName: Tommy
        lastName: Thelen
        orcid: https://www.orcid.org/0000-0003-1709-3754
      category: science
      config: {}
      copyOfTale: 5c4887409759c200017b231f
      created: '2019-01-23T15:24:48.217000+00:00'
      creatorId: 5c4887149759c200017b22c0
      dataSet:
      - itemId: 5c4887389759c200017b230e
        mountPath: illustris.jpg
      description: "#### Markdown Editor"
      doi: doi:x.xx.xxx
      folderId: 5c4887409759c200017b2316
      format: 4
      icon: https://raw.githubusercontent.com/whole-tale/jupyter-base/master/squarelogo-greytext-orangebody-greymoons.png
      iframe: true
      illustration: https://raw.githubusercontent.com/whole-tale/dashboard/master/public/images/demo-graph2.jpg
      imageId: 5c4886279759c200017b22a3
      imageInfo:
        digest: sha256:9aaece098841b13cdc64ea6756767357f5c9eb1ab10f67b9e67a90960b894053
        fullName: registry.local.wholetale.org/5c3cd7faa697bf0001ce6cc0-1547494547
        jobId: 5873dcdbaec03000014x123
      license: CC0-1.0
      narrative: []
      narrativeId: 5c4887409759c200017b2319
      public: false
      publishInfo:
      - date: '2019-01-23T15:48:17.476000+00:00'
        pid: urn:uuid:939e48ec-1107-45d9-baa7-05cef08e51cd
        uri: https://dev.nceas.ucsb.edu/view/urn:uuid:8ec-1107-45d9-baa7-05cef08e51cd
      title: My Tale
      updated: '2019-01-23T15:48:17.476000+00:00'
    properties:
      _id:
        description: internal unique identifier
        type: string
      authors:
        description: A list of authors that are associated with the Tale
        items:
          description: A JSON structure representing a Tale author.
          type: object
        type: array
      category:
        description: Keyword describing topic of the Tale
        type: string
      config:
        "$ref": "#/definitions/containerConfig"
      copyOfTale:
        description: An ID of a source Tale, if the Tale is a copy.
        type: string
      created:
        description: The time when the tale was created.
        format: date-time
        type: string
      creatorId:
        description: A unique identifier of the user that created the tale.
        type: string
      dataSet:
        "$ref": "#/definitions/dataSet"
      description:
        description: The description of the Tale (Markdown)
        type: string
      folderId:
        description: ID of a folder containing copy of tale['dataSet']
        type: string
      format:
        description: Tale format specification
        type: integer
      icon:
        description: A URL to an image icon
        type: string
      iframe:
        description: If 'true', the tale can be embedded in an iframe
        type: boolean
      illustration:
        description: A URL to an image depicturing the content of the Tale
        type: string
      imageId:
        description: ID of a WT Image used by the Tale
        type: string
      imageInfo:
        "$ref": "#/definitions/imageInfo"
      license:
        description: The license that the Tale is under
        type: string
      narrative:
        description: List of Girder Items containing Tale's narrative
        items:
          description: Girder Item id
          type: string
        type: array
      narrativeId:
        description: ID of a folder containing copy of tale['narrative']
        type: string
      public:
        default: true
        description: If set to true the Tale is accessible by anyone.
        type: boolean
      publishInfo:
        "$ref": "#/definitions/publishInfo"
      title:
        description: Title of the Tale
        type: string
      updated:
        description: The last time when the tale was modified.
        format: date-time
        type: string
      workspaceId:
        description: ID of a folder containing Tale's workspace
        type: string
    required:
    - dataSet
    - imageId
host: girder.local.wholetale.org
info:
  title: Girder REST API
  version: 2.5.0
paths:
  "/api_key":
    get:
      description: Only site administrators may list keys for other users. If no userId
        parameter is passed, lists keys for the current user.
      operationId: api_key_listKeys
      parameters:
      - description: ID of the user whose keys to list.
        in: query
        name: userId
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: List API keys for a given user.
      tags:
      - api_key
    post:
      operationId: api_key_createKey
      parameters:
      - default: ''
        description: Name for the API key.
        in: query
        name: name
        required: false
        type: string
      - description: JSON list of scopes for this key.
        in: query
        name: scope
        required: false
        type: string
      - description: Max number of days tokens created with this key will last.
        in: query
        name: tokenDuration
        required: false
        type: string
      - default: true
        description: Whether the key is currently active.
        in: query
        name: active
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: Create a new API key.
      tags:
      - api_key
  "/api_key/token":
    post:
      operationId: api_key_createToken
      parameters:
      - description: The API key.
        in: query
        name: key
        required: true
        type: string
      - description: Number of days that the token should last.
        format: float
        in: query
        name: duration
        required: false
        type: number
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: Create a token from an API key.
      tags:
      - api_key
  "/api_key/{id}":
    delete:
      operationId: api_key_deleteKey
      parameters:
      - description: The ID of the API key to delete.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: Delete an API key.
      tags:
      - api_key
    put:
      operationId: api_key_updateKey
      parameters:
      - description: The ID of the API key.
        in: path
        name: id
        required: true
        type: string
      - description: Name for the key.
        in: query
        name: name
        required: false
        type: string
      - default: []
        description: JSON list of scopes for this key.
        in: query
        name: scope
        required: false
        type: string
      - description: Max number of days tokens created with this key will last.
        in: query
        name: tokenDuration
        required: false
        type: string
      - description: Whether the key is currently active.
        in: query
        name: active
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: Update an API key.
      tags:
      - api_key
  "/assetstore":
    get:
      operationId: assetstore_find
      parameters:
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: List assetstores.
      tags:
      - assetstore
    post:
      description: You must be an administrator to call this.
      operationId: assetstore_createAssetstore
      parameters:
      - description: Unique name for the assetstore.
        in: query
        name: name
        required: true
        type: string
      - description: Type of the assetstore.
        format: int32
        in: query
        name: type
        required: true
        type: integer
      - description: Root path on disk (for filesystem type).
        in: query
        name: root
        required: false
        type: string
      - description: File creation permissions (for filesystem type).
        in: query
        name: perms
        required: false
        type: string
      - description: Database name (for GridFS type)
        in: query
        name: db
        required: false
        type: string
      - description: Mongo host URI (for GridFS type)
        in: query
        name: mongohost
        required: false
        type: string
      - description: Replica set name (for GridFS type)
        in: query
        name: replicaset
        required: false
        type: string
      - description: Shard the collection (for GridFS type).  Set to "auto" to set
          up sharding.
        in: query
        name: shard
        required: false
        type: string
      - description: The S3 bucket to store data in (for S3 type).
        in: query
        name: bucket
        required: false
        type: string
      - default: ''
        description: Optional path prefix within the bucket under which files will
          be stored (for S3 type).
        in: query
        name: prefix
        required: false
        type: string
      - description: The AWS access key ID to use for authentication (for S3 type).
        in: query
        name: accessKeyId
        required: false
        type: string
      - description: The AWS secret key to use for authentication (for S3 type).
        in: query
        name: secret
        required: false
        type: string
      - default: ''
        description: The S3 service host (for S3 type).  Default is s3.amazonaws.com.  This
          can be used to specify a protocol and port as well using the form [http[s]://](host
          domain)[:(port)]. Do not include the bucket name here.
        in: query
        name: service
        required: false
        type: string
      - default: false
        description: If this assetstore is read-only, set this to true.
        in: query
        name: readOnly
        required: false
        type: boolean
      - default: us-east-1
        description: The AWS region to which the S3 bucket belongs.
        in: query
        name: region
        required: false
        type: string
      - description: The credentials for connecting to S3 will be inferred by Boto
          rather than explicitly passed. Inferring credentials will ignore accessKeyId
          and secret.
        in: query
        name: inferCredentials
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: Create a new assetstore.
      tags:
      - assetstore
  "/assetstore/{id}":
    delete:
      description: This will fail if there are any files in the assetstore.
      operationId: assetstore_deleteAssetstore
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            A parameter was invalid.

            The assetstore is not empty.
        '403':
          description: You are not an administrator.
      summary: Delete an assetstore.
      tags:
      - assetstore
    get:
      operationId: assetstore_getAssetstore
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: Get information about an assetstore.
      tags:
      - assetstore
    put:
      operationId: assetstore_updateAssetstore
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Unique name for the assetstore.
        in: query
        name: name
        required: true
        type: string
      - description: Root path on disk (for Filesystem type)
        in: query
        name: root
        required: false
        type: string
      - description: File creation permissions (for Filesystem type)
        in: query
        name: perms
        required: false
        type: string
      - description: Database name (for GridFS type)
        in: query
        name: db
        required: false
        type: string
      - description: Mongo host URI (for GridFS type)
        in: query
        name: mongohost
        required: false
        type: string
      - description: Replica set name (for GridFS type)
        in: query
        name: replicaset
        required: false
        type: string
      - description: Shard the collection (for GridFS type).  Set to "auto" to set
          up sharding.
        in: query
        name: shard
        required: false
        type: string
      - description: The S3 bucket to store data in (for S3 type).
        in: query
        name: bucket
        required: false
        type: string
      - default: ''
        description: Optional path prefix within the bucket under which files will
          be stored (for S3 type).
        in: query
        name: prefix
        required: false
        type: string
      - description: The AWS access key ID to use for authentication (for S3 type).
        in: query
        name: accessKeyId
        required: false
        type: string
      - description: The AWS secret key to use for authentication (for S3 type).
        in: query
        name: secret
        required: false
        type: string
      - default: ''
        description: The S3 service host (for S3 type).  Default is s3.amazonaws.com.  This
          can be used to specify a protocol and port as well using the form [http[s]://](host
          domain)[:(port)]. Do not include the bucket name here.
        in: query
        name: service
        required: false
        type: string
      - description: If this assetstore is read-only, set this to true.
        in: query
        name: readOnly
        required: false
        type: boolean
      - default: us-east-1
        description: The AWS region to which the S3 bucket belongs.
        in: query
        name: region
        required: false
        type: string
      - description: Whether this is the current assetstore
        in: query
        name: current
        required: true
        type: boolean
      - description: The credentials for connecting to S3 will be inferred by Boto
          rather than explicitly passed. Inferring credentials will ignore accessKeyId
          and secret.
        in: query
        name: inferCredentials
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: Update an existing assetstore.
      tags:
      - assetstore
  "/assetstore/{id}/files":
    get:
      operationId: assetstore_getAssetstoreFiles
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: _id
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: Get a list of files controlled by an assetstore.
      tags:
      - assetstore
  "/assetstore/{id}/import":
    post:
      description: This does not move or copy the existing data, it just creates references
        to it in the Girder data hierarchy. Deleting those references will not delete
        the underlying data. This operation is currently only supported for S3 assetstores.
      operationId: assetstore_importData
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Root path within the underlying storage system to import.
        in: query
        name: importPath
        required: false
        type: string
      - description: ID of a folder, collection, or user in Girder under which the
          data will be imported.
        in: query
        name: destinationId
        required: true
        type: string
      - description: Type of the destination resource.
        enum:
        - folder
        - collection
        - user
        in: query
        name: destinationType
        required: true
        type: string
      - default: false
        description: Whether to record progress on the import.
        in: query
        name: progress
        required: false
        type: boolean
      - default: false
        description: Whether folders containing only files should be imported as items.
        in: query
        name: leafFoldersAsItems
        required: false
        type: boolean
      - description: If set, only filenames matching this regular expression will
          be imported.
        in: query
        name: fileIncludeRegex
        required: false
        type: string
      - description: If set, only filenames that do not match this regular expression
          will be imported. If a file matches both the include and exclude regex,
          it will be excluded.
        in: query
        name: fileExcludeRegex
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not an administrator.
      summary: Import existing data into an assetstore.
      tags:
      - assetstore
  "/collection":
    get:
      operationId: collection_find
      parameters:
      - description: Pass this to perform a text search for collections.
        in: query
        name: text
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: List or search for collections.
      tags:
      - collection
    post:
      operationId: collection_createCollection
      parameters:
      - description: Name for the collection. Must be unique.
        in: query
        name: name
        required: true
        type: string
      - description: Collection description.
        in: query
        name: description
        required: false
        type: string
      - default: false
        description: Whether the collection should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not authorized to create collections.
      summary: Create a new collection.
      tags:
      - collection
  "/collection/{id}":
    delete:
      operationId: collection_deleteCollection
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin permission denied on the collection.
      summary: Delete a collection by ID.
      tags:
      - collection
    get:
      operationId: collection_getCollection
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read permission denied on the collection.
      summary: Get a collection by ID.
      tags:
      - collection
    put:
      operationId: collection_updateCollection
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Unique name for the collection.
        in: query
        name: name
        required: false
        type: string
      - description: Collection description.
        in: query
        name: description
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write permission denied on the collection.
      summary: Edit a collection by ID.
      tags:
      - collection
  "/collection/{id}/access":
    get:
      operationId: collection_getCollectionAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin permission denied on the collection.
      summary: Get the access control list for a collection.
      tags:
      - collection
    put:
      operationId: collection_updateCollectionAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The access control list as JSON.
        in: query
        name: access
        required: true
        type: string
      - description: List of public access flags to set on the collection.
        in: query
        name: publicFlags
        required: false
        type: string
      - description: Whether the collection should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      - default: false
        description: Whether the policies should be applied to all folders under this
          collection as well.
        in: query
        name: recurse
        required: false
        type: boolean
      - default: false
        description: If recurse is set to True, this controls whether progress notifications
          will be sent.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin permission denied on the collection.
      summary: Set the access control list for a collection.
      tags:
      - collection
  "/collection/{id}/details":
    get:
      operationId: collection_getCollectionDetails
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the collection.
      summary: Get detailed information about a collection.
      tags:
      - collection
  "/collection/{id}/download":
    get:
      operationId: collection_downloadCollection
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: JSON list of MIME types to include.
        in: query
        name: mimeFilter
        required: false
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the collection.
      summary: Download an entire collection as a zip archive.
      tags:
      - collection
  "/dataset":
    get:
      operationId: dataset_listDatasets
      parameters:
      - default: false
        description: If True, filters results to datasets registered by the user.Defaults
          to False.
        in: query
        name: myData
        required: false
        type: boolean
      - description: Filter datasets by an identifier
        in: query
        name: identifiers
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lowerName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Returns all registered datasets from the system that user has access
        to
      tags:
      - dataset
  "/dataset/register":
    post:
      description: |-
        This does not upload or copy the existing data, it just creates references to it in the Girder data hierarchy. Deleting those references will not delete the underlying data. This operation is currently only supported for DataONE repositories.
        If the parentId and the parentType is not provided, data will be registered into home directory of the user calling the endpoint
      operationId: dataset_importData
      parameters:
      - description: Parent ID for the new parent of this folder.
        in: query
        name: parentId
        required: false
        type: string
      - default: folder
        description: Type of the folder's parent
        enum:
        - folder
        - user
        - collection
        in: query
        name: parentType
        required: false
        type: string
      - default: true
        description: Whether the folder should be publicly visible. Defaults to True.
        in: query
        name: public
        required: false
        type: boolean
      - description: A list of data mappings
        in: body
        name: dataMap
        required: true
        schema: 
          type: string
      - default: https://cn.dataone.org/cn/v2
        description: The node endpoint url. This can be used to register datasets
          from custom networks, such as the DataONE development network. This can
          be passed in as an ordinary string. Examples include https://dev.nceas.ucsb.edu/knb/d1/mn/v2
          and https://cn.dataone.org/cn/v2
        in: query
        name: base_url
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: Write access denied for parent collection.
      summary: Create a folder containing references to an external data
      tags:
      - dataset
  "/dataset/{id}":
    delete:
      operationId: dataset_deleteUserDataset
      parameters:
      - description: The ID of the Dataset.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
      summary: Remove user's reference to a registered dataset
      tags:
      - dataset
    get:
      operationId: dataset_getDataset
      parameters:
      - description: The ID of the Dataset.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the resource.
      summary: Get any registered dataset by ID.
      tags:
      - dataset
  "/dm/clearCache":
    put:
      operationId: dm_clearCache
      parameters:
      - default: false
        description: By default, only items that are not locked are evicted from the
          cache. That is, items that would otherwise be collectable by the garbage
          collector. If this parameter is set, evict all items from the cache and
          forcibly remove all locks associated with them. This is not recommended
          since the consequences to the consistency of the system are hard to predict.
        in: query
        name: force
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '403':
          description: Admin access required.
      summary: Clean the DMS cache. Will not affect items being currently downloaded.
      tags:
      - dm
  "/dm/fs/item/{itemId}":
    get:
      operationId: dm_getItemUnfiltered
      parameters:
      - description: The ID of the item.
        in: path
        name: itemId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Object was not found.
      summary: Returns an unfiltered item
      tags:
      - dm
  "/dm/fs/{id}/evict":
    get:
      operationId: dm_evict
      parameters:
      - description: The ID of the item.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Access was denied for the lock.
      summary: Evict an item from the cache.
      tags:
      - dm
  "/dm/fs/{id}/listing":
    get:
      operationId: dm_getListing
      parameters:
      - description: The ID of the folder/item.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the object.
      summary: List the content of a folder or item.
      tags:
      - dm
  "/dm/fs/{itemId}/raw":
    get:
      operationId: dm_getRawObject
      parameters:
      - description: The ID of the object.
        in: path
        name: itemId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Object was not found.
      summary: Returns an unfiltered object
      tags:
      - dm
  "/dm/fs/{id}/setProperties":
    put:
      operationId: dm_setProperties
      parameters:
      - description: The ID of the object.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied.
      summary: Set arbitrary property on folder/item/file
      tags:
      - dm
  "/dm/lock":
    get:
      operationId: dm_listLocks
      parameters:
      - description: Restrict results to a single session
        in: query
        name: sessionId
        required: false
        type: string
      - description: Only return locks on a given item
        in: query
        name: itemId
        required: false
        type: string
      - description: Only return locks with a specific lock owner
        in: query
        name: ownerId
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: List locks for a given user.
      tags:
      - dm
    post:
      operationId: dm_acquireLock
      parameters:
      - description: A Data Manager session.
        in: query
        name: sessionId
        required: true
        type: string
      - description: The item to lock
        in: query
        name: itemId
        required: true
        type: string
      - description: The lock owner.
        in: query
        name: ownerId
        required: false
        type: string
      responses:
        '200':
          description: Success
        '404':
          description: Item not in session.
      summary: Acquires a lock on an item.
      tags:
      - dm
  "/dm/lock/{id}":
    delete:
      operationId: dm_releaseLock
      parameters:
      - description: The ID of the lock.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Access was denied for the lock.
      summary: Removes an existing lock.
      tags:
      - dm
    get:
      operationId: dm_getLock
      parameters:
      - description: The ID of the lock.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the lock.
      summary: Get a lock by ID.
      tags:
      - dm
  "/dm/lock/{id}/download":
    get:
      operationId: dm_downloadItem
      parameters:
      - description: The ID of the lock.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Access was denied for the lock.
      summary: Download the item locked by a lock.
      tags:
      - dm
  "/dm/session":
    get:
      operationId: dm_listSessions
      responses:
        '200':
          description: Success
      summary: List sessions for a given user.
      tags:
      - dm
    post:
      operationId: dm_createSession
      parameters:
      - description: 'An optional data set to initialize the session with. A data
          set is a list of objects of the form {"itemId": string, "mountPath": string}.'
        in: query
        name: dataSet
        required: false
        type: string
      - description: An optional id of a Tale. If provided, Tale's involatileData
          will be used to initialize the session instead of the dataSet parameter.
        in: query
        name: taleId
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Create a session.
      tags:
      - dm
  "/dm/session/{id}":
    delete:
      operationId: dm_removeSession
      parameters:
      - description: The ID of the session.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Access was denied for the session.
      summary: Remove an existing session.
      tags:
      - dm
    get:
      operationId: dm_getSession
      parameters:
      - description: The ID of the session.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: 'If True, the dataSet of the returned session will containtwo
          additional fields for each entry: "type": "folder"|"item" and "obj": <itemOrFolder>'
        in: query
        name: loadObjects
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the session.
      summary: Get a session by ID.
      tags:
      - dm
    put:
      description: Specifically, allows changing the dataSet of a session, which implies
        the ability to add/remove folders/files from a live session. Note that removal
        can fail if a file is in use.
      operationId: dm_modifySession
      parameters:
      - description: The ID of the session.
        in: path
        name: id
        required: true
        type: string
      - description: 'An optional data set to initialize the session with. A data
          set is a list of objects of the form {"itemId": string, "mountPath": string}.'
        in: query
        name: dataSet
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the session.
      summary: Modify a session.
      tags:
      - dm
  "/dm/session/{sessionId}/lock":
    get:
      operationId: dm_listLocksForSession
      parameters:
      - description: Restrict results to a single session
        in: path
        name: sessionId
        required: true
        type: string
      responses:
        '200':
          description: Success
      summary: List locks for a given user.
      tags:
      - dm
  "/dm/session/{id}/object":
    get:
      operationId: dm_getObject
      parameters:
      - description: The ID of the session.
        in: path
        name: id
        required: true
        type: string
      - description: The path of the object, starting from the mount point.
        in: query
        name: path
        required: true
        type: string
      - default: false
        description: Whether to also return a listing of all the children of the object
          at the specified path
        in: query
        name: children
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Object was not found.
        '403':
          description: Read access was denied for the session.
      summary: Get an object in a session using a path.
      tags:
      - dm
  "/dm/session/{id}/transfer":
    get:
      operationId: dm_listTransfersForSession
      parameters:
        - description: The ID of the session.
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Success
      summary: List transfers for a given user and session.
      tags:
      - dm
  "/dm/transfer":
    get:
      operationId: dm_listTransfers
      parameters:
      - description: If specified, only return transfers belonging to a certain session.
        in: query
        name: sessionId
        required: false
        type: string
      - description: By default, transfers that finished more than 1 minute before
          this call is made are not returned. Set this to "false" to return all transfers.
        in: query
        name: discardOld
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: List transfers for a given user.
      tags:
      - dm
  "/file":
    post:
      description: Use POST /file/chunk to send the contents of the file.  The data
        for the first chunk of the file can be included with this query by sending
        it as the body of the request using an appropriate content-type and with the
        other parameters as part of the query string.  If the entire file is uploaded
        via this call, the resulting file is returned.
      operationId: file_initUpload
      parameters:
      - description: Type being uploaded into.
        enum:
        - folder
        - item
        in: query
        name: parentType
        required: true
        type: string
      - description: The ID of the parent.
        in: query
        name: parentId
        required: true
        type: string
      - description: Name of the file being created.
        in: query
        name: name
        required: true
        type: string
      - description: Size in bytes of the file.
        format: int32
        in: query
        name: size
        required: false
        type: integer
      - description: The MIME type of the file.
        in: query
        name: mimeType
        required: false
        type: string
      - description: If this is a link file, pass its URL instead of size and mimeType
          using this parameter.
        in: query
        name: linkUrl
        required: false
        type: string
      - description: If included, this information is passed to the data.process event
          when the upload is complete.
        in: query
        name: reference
        required: false
        type: string
      - description: Direct the upload to a specific assetstore (admin-only).
        in: query
        name: assetstoreId
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied on the parent folder.
        '500':
          description: Failed to create upload.
      summary: Start a new upload or create an empty or link file.
      tags:
      - file
  "/file/chunk":
    post:
      description: The data for the chunk should be sent as the body of the request
        using an appropriate content-type and with the other parameters as part of
        the query string.  Alternately, the data can be sent as a file in the "chunk"
        field in multipart form data.  Multipart uploads are much less efficient and
        their use is deprecated.
      operationId: file_readChunk
      parameters:
      - description: The ID of the document.
        in: formData
        name: uploadId
        required: true
        type: string
      - description: Offset of the chunk in the file.
        format: int32
        in: formData
        name: offset
        required: true
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Received too many bytes.

            Chunk is smaller than the minimum size.
        '403':
          description: You are not the user who initiated the upload.
        '500':
          description: Failed to store upload.
      consumes:
        - multipart/form-data
      summary: Upload a chunk of a file.
      tags:
      - file
  "/file/completion":
    post:
      description: This is only required in certain non-standard upload behaviors.
        Clients should know which behavior models require the finalize step to be
        called in their behavior handlers.
      operationId: file_finalizeUpload
      parameters:
      - description: The ID of the document.
        in: formData
        name: uploadId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            The upload does not require finalization.

            Not enough bytes have been uploaded.
        '403':
          description: You are not the user who initiated the upload.
      consumes:
        - multipart/form-data
      summary: Finalize an upload explicitly if necessary.
      tags:
      - file
  "/file/offset":
    get:
      operationId: file_requestOffset
      parameters:
      - description: The ID of the document.
        in: formData
        name: uploadId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: The ID was invalid, or the offset did not match the server's
            record.
      consumes:
        - multipart/form-data
      summary: Request required offset before resuming an upload.
      tags:
      - file
  "/file/upload/{id}":
    delete:
      operationId: file_cancelUpload
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You lack permission to cancel this upload.
      summary: Cancel a partially completed upload.
      tags:
      - file
  "/file/{id}":
    delete:
      operationId: file_deleteFile
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied on the parent folder.
      summary: Delete a file by ID.
      tags:
      - file
    get:
      operationId: file_getFile
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the file.
      summary: Get a file's information.
      tags:
      - file
    put:
      operationId: file_updateFile
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The name to set on the file.
        in: query
        name: name
        required: false
        type: string
      - description: The MIME type of the file.
        in: query
        name: mimeType
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied on the parent folder.
      summary: Change file metadata such as name or MIME type.
      tags:
      - file
  "/file/{id}/contents":
    put:
      description: After calling this, send the chunks just like you would with a
        normal file upload.
      operationId: file_updateFileContents
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Size in bytes of the new file.
        format: int32
        in: query
        name: size
        required: true
        type: integer
      - description: If included, this information is passed to the data.process event
          when the upload is complete.
        in: query
        name: reference
        required: false
        type: string
      - description: Direct the upload to a specific assetstore (admin-only).
        in: query
        name: assetstoreId
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Change the contents of an existing file.
      tags:
      - file
  "/file/{id}/copy":
    post:
      operationId: file_copy
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the item to copy the file to.
        in: formData
        name: itemId
        required: true
        type: string
      responses:
        '200':
          description: Success
      consumes:
        - multipart/form-data
      summary: Copy a file.
      tags:
      - file
  "/file/{id}/download":
    get:
      description: This endpoint also accepts the HTTP "Range" header for partial
        file downloads.
      operationId: file_download
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 0
        description: Start downloading at this offset in bytes within the file.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - description: If you only wish to download part of the file, pass this as the
          index of the last byte to download. Unlike the HTTP Range header, the endByte
          parameter is non-inclusive, so you should set it to the index of the byte
          one past the final byte you wish to receive.
        format: int32
        in: query
        name: endByte
        required: false
        type: integer
      - default: attachment
        description: Specify the Content-Disposition response header disposition-type
          value.
        enum:
        - inline
        - attachment
        in: query
        name: contentDisposition
        required: false
        type: string
      - description: Arbitrary data to send along with the download request.
        in: query
        name: extraParameters
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied on the parent folder.
      summary: Download a file.
      tags:
      - file
  "/file/{id}/download/{name}":
    get:
      description: The name parameter doesn't alter the download.  Some download clients
        save files based on the last part of a path, and specifying the name satisfies
        those clients.
      operationId: file_downloadWithName
      parameters:
      - description: The ID of the file.
        in: path
        name: id
        required: true
        type: string
      - description: The name of the file.  This is ignored.
        in: path
        name: name
        required: true
        type: string
      - description: Start downloading at this offset in bytes within the file.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied on the parent folder.
      summary: Download a file.
      tags:
      - file
  "/file/{id}/move":
    put:
      operationId: file_moveFileToAssetstore
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The destination assetstore.
        in: formData
        name: assetstoreId
        required: true
        type: string
      - default: false
        description: Controls whether progress notifications will be sent.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
      consumes:
        - multipart/form-data
      summary: Move a file to a different assetstore.
      tags:
      - file
  "/folder":
    get:
      description: 'You must pass either a "folderId" or "text" field to specify how
        you are searching for folders.  If you omit one of these parameters the request
        will fail and respond : "Invalid search mode."'
      operationId: folder_find
      parameters:
      - description: Type of the folder's parent
        enum:
        - folder
        - user
        - collection
        in: query
        name: parentType
        required: false
        type: string
      - description: The ID of the folder's parent.
        in: query
        name: parentId
        required: false
        type: string
      - description: Pass to perform a text search.
        in: query
        name: text
        required: false
        type: string
      - description: Pass to lookup a folder by exact name match. Must pass parentType
          and parentId as well when using this.
        in: query
        name: name
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lowerName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the parent resource.
      summary: Search for folders by certain properties.
      tags:
      - folder
    post:
      operationId: folder_createFolder
      parameters:
      - default: folder
        description: Type of the folder's parent
        enum:
        - folder
        - user
        - collection
        in: query
        name: parentType
        required: false
        type: string
      - description: The ID of the folder's parent.
        in: query
        name: parentId
        required: true
        type: string
      - description: Name of the folder.
        in: query
        name: name
        required: true
        type: string
      - default: ''
        description: Description for the folder.
        in: query
        name: description
        required: false
        type: string
      - default: false
        description: Return existing folder if it exists rather than creating a new
          one.
        in: query
        name: reuseExisting
        required: false
        type: boolean
      - description: Whether the folder should be publicly visible. By default, inherits
          the value from parent folder, or in the case of user or collection parentType,
          defaults to False.
        in: query
        name: public
        required: false
        type: boolean
      - description: A JSON object containing the metadata keys to add
        in: formData
        name: metadata
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied on the parent
      consumes:
        - multipart/form-data
      summary: Create a new folder.
      tags:
      - folder
  "/folder/registered":
    get:
      operationId: folder_listImportedData
      responses:
        '200':
          description: Success
        '403':
          description: Write access denied for parent collection.
      summary: List all folders containing references to an external data
      tags:
      - folder
  "/folder/{id}":
    delete:
      operationId: folder_deleteFolder
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the folder.
      summary: Delete a folder by ID.
      tags:
      - folder
    get:
      operationId: folder_getFolder
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the folder.
      summary: Get a folder by ID.
      tags:
      - folder
    put:
      operationId: folder_updateFolder
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Name of the folder.
        in: query
        name: name
        required: false
        type: string
      - description: Description for the folder.
        in: query
        name: description
        required: false
        type: string
      - description: Type of the folder's parent
        enum:
        - folder
        - user
        - collection
        in: query
        name: parentType
        required: false
        type: string
      - description: Parent ID for the new parent of this folder.
        in: query
        name: parentId
        required: false
        type: string
      - description: A JSON object containing the metadata keys to add
        in: formData
        name: metadata
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the folder or its new parent object.
      consumes:
        - multipart/form-data
      summary: Update a folder or move it into a new parent.
      tags:
      - folder
  "/folder/{id}/access":
    get:
      operationId: folder_getFolderAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the folder.
      summary: Get the access control list for a folder.
      tags:
      - folder
    put:
      operationId: folder_updateFolderAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The JSON-encoded access control list.
        in: query
        name: access
        required: true
        type: string
      - description: JSON list of public access flags.
        in: query
        name: publicFlags
        required: false
        type: string
      - description: Whether the folder should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      - default: false
        description: Whether the policies should be applied to all subfolders under
          this folder as well.
        in: query
        name: recurse
        required: false
        type: boolean
      - default: false
        description: If recurse is set to True, this controls whether progress notifications
          will be sent.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the folder.
      summary: Update the access control list for a folder.
      tags:
      - folder
  "/folder/{id}/contents":
    delete:
      description: Cleans out all the items and subfolders from under a folder, but
        does not remove the folder itself.
      operationId: folder_deleteContents
      parameters:
      - description: The ID of the folder to clean.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied on the folder.
      summary: Remove all contents from a folder.
      tags:
      - folder
  "/folder/{id}/copy":
    post:
      operationId: folder_copyFolder
      parameters:
      - description: The ID of the original folder.
        in: path
        name: id
        required: true
        type: string
      - description: Type of the new folder's parent
        enum:
        - folder
        - user
        - collection
        in: query
        name: parentType
        required: false
        type: string
      - description: The ID of the parent document.
        in: query
        name: parentId
        required: false
        type: string
      - description: Name for the new folder.
        in: query
        name: name
        required: false
        type: string
      - description: Description for the new folder.
        in: query
        name: description
        required: false
        type: string
      - description: Whether the folder should be publicly visible. By default, inherits
          the value from parent folder, or in the case of user or collection parentType,
          defaults to False. If 'original', use the value of the original folder.
        enum:
        - 'true'
        - 'false'
        - original
        in: query
        name: public
        required: false
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            A parameter was invalid.

            ID was invalid.
        '403':
          description: |-
            Read access was denied on the original folder.

            Write access was denied on the parent.
      summary: Copy a folder.
      tags:
      - folder
  "/folder/{id}/dataset":
    get:
      operationId: folder_getDataSet
      parameters:
      - description: The ID of the folder
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
      summary: Convert folder content into DM dataSet
      tags:
      - folder
  "/folder/{id}/details":
    get:
      operationId: folder_getFolderDetails
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the folder.
      summary: Get detailed information about a folder.
      tags:
      - folder
  "/folder/{id}/download":
    get:
      operationId: folder_downloadFolder
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: JSON list of MIME types to include.
        in: query
        name: mimeFilter
        required: false
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the folder.
      summary: Download an entire folder as a zip archive.
      tags:
      - folder
  "/folder/{id}/listing":
    get:
      operationId: folder_listFolder
      parameters:
      - description: The ID of the folder.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the folder.
      summary: List the content of a folder.
      tags:
      - folder
  "/folder/{id}/metadata":
    delete:
      operationId: folder_deleteMetadata
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: A JSON list containing the metadata fields to delete
        in: body
        name: fields
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Invalid JSON passed in request body.

            Metadata key name was invalid.
        '403':
          description: Write access was denied for the folder.
      summary: Delete metadata fields on a folder.
      tags:
      - folder
    put:
      description: Set metadata fields to null in order to delete them.
      operationId: folder_setMetadata
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: A JSON object containing the metadata keys to add
        in: body
        name: metadata
        required: true
        schema:
          type: string
      - default: false
        description: Whether "null" is allowed as a metadata value.
        in: query
        name: allowNull
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Invalid JSON passed in request body.

            Metadata key name was invalid.
        '403':
          description: Write access was denied for the folder.
      summary: Set metadata fields on an folder.
      tags:
      - folder
  "/folder/{id}/rootpath":
    get:
      operationId: folder_rootpath
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the folder.
      summary: Get the path to the root of the folder's hierarchy.
      tags:
      - folder
  "/group":
    get:
      operationId: group_find
      parameters:
      - description: Pass this to perform a full-text search for groups.
        in: query
        name: text
        required: false
        type: string
      - default: false
        description: If true, only return exact name matches. This is case sensitive.
        in: query
        name: exact
        required: false
        type: boolean
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
      summary: Search for groups or list all groups.
      tags:
      - group
    post:
      description: Must be logged in.
      operationId: group_createGroup
      parameters:
      - description: Unique name for the group.
        in: query
        name: name
        required: true
        type: string
      - default: ''
        description: Description of the group.
        in: query
        name: description
        required: false
        type: string
      - default: false
        description: Whether the group should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied on the parent
      summary: Create a new group.
      tags:
      - group
  "/group/{id}":
    delete:
      operationId: group_deleteGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the group.
      summary: Delete a group by ID.
      tags:
      - group
    get:
      operationId: group_getGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the group.
      summary: Get a group by ID.
      tags:
      - group
    put:
      operationId: group_updateGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The name to set on the group.
        in: query
        name: name
        required: false
        type: string
      - description: Description for the group.
        in: query
        name: description
        required: false
        type: string
      - description: Whether the group should be publicly visible
        in: query
        name: public
        required: false
        type: boolean
      - description: Can admins or moderators directly add members to this group?  Only
          system administrators are allowed to set this field
        enum:
        - default
        - 'no'
        - yesmod
        - yesadmin
        in: query
        name: addAllowed
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied for the group.
      summary: Update a group by ID.
      tags:
      - group
  "/group/{id}/access":
    get:
      operationId: group_getGroupAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the group.
      summary: Get the access control list for a group.
      tags:
      - group
  "/group/{id}/admin":
    delete:
      operationId: group_demote_admin
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to demote.
        in: formData
        name: userId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You don't have permission to demote users.
      consumes:
        - multipart/form-data
      summary: Demote a user to a normal group member.
      tags:
      - group
    post:
      operationId: group_promoteToAdmin
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to promote.
        in: formData
        name: userId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You don't have permission to promote users.
      consumes:
        - multipart/form-data
      summary: Promote a member to be an administrator of the group.
      tags:
      - group
  "/group/{id}/invitation":
    get:
      operationId: group_getGroupInvitations
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lastName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied for the group.
      summary: Show outstanding invitations for a group.
      tags:
      - group
    post:
      description: The "force" option to this endpoint is only available to administrators
        and can be used to bypass the invitation process and instead add the user
        directly to the group.
      operationId: group_inviteToGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to invite or accept.
        in: formData
        name: userId
        required: true
        type: string
      - default: 0
        description: The access level the user will be given when they accept the
          invitation.
        format: int32
        in: query
        name: level
        required: false
        type: integer
      - default: false
        description: If you do not want this action to send an email to the target
          user, set this to true.
        in: query
        name: quiet
        required: false
        type: boolean
      - default: false
        description: Add user directly rather than sending an invitation (admin-only
          option).
        in: query
        name: force
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied for the group.
      consumes:
        - multipart/form-data
      summary: Invite a user to join a group, or accept a user's request to join.
      tags:
      - group
  "/group/{id}/member":
    delete:
      description: If the specified user is not yet a member of the group, this will
        delete any outstanding invitation or membership request for the user. Passing
        no userId parameter will assume that the current user is removing themself.
      operationId: group_removeFromGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to remove. If not passed, will remove yourself
          from the group.
        in: formData
        name: userId
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You don't have permission to remove that user.
      consumes:
        - multipart/form-data
      summary: Remove a user from a group, or uninvite them.
      tags:
      - group
    get:
      operationId: group_listMembers
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lastName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the group.
      summary: List members of a group.
      tags:
      - group
    post:
      operationId: group_joinGroup
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You were not invited to this group, or do not have read access
            to it.
      summary: Request to join a group, or accept an invitation to join.
      tags:
      - group
  "/group/{id}/moderator":
    delete:
      operationId: group_demote_mod
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to demote.
        in: formData
        name: userId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You don't have permission to demote users.
      consumes:
        - multipart/form-data
      summary: Demote a user to a normal group member.
      tags:
      - group
    post:
      operationId: group_promoteToModerator
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the user to promote.
        in: formData
        name: userId
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You don't have permission to promote users.
      consumes:
        - multipart/form-data
      summary: Promote a member to be a moderator of the group.
      tags:
      - group
  "/homedirpass/generate":
    get:
      operationId: "<girder.plugins.wt_home_dir.resources.homedirpass.Homedirpass
        object at 0x7fdc75287ba8>_generatePassword"
      responses:
        '200':
          description: Success
      summary: Generate, set, and return a Home Dir password for a user.
      tags:
      - homedirpass
  "/homedirpass/set":
    put:
      operationId: "<girder.plugins.wt_home_dir.resources.homedirpass.Homedirpass
        object at 0x7fdc75287ba8>_setPassword"
      parameters:
      - description: The password to set.
        in: formData
        name: password
        required: true
        type: string
      responses:
        '200':
          description: Success
      consumes:
        - multipart/form-data
      summary: Sets the Home Dir password for a user.
      tags:
      - homedirpass
  "/image":
    get:
      operationId: image_listImages
      parameters:
      - description: The ID of the image's parent.
        in: query
        name: parentId
        required: false
        type: string
      - description: Perform a full text search for image with a matching name or
          description.
        in: query
        name: text
        required: false
        type: string
      - description: Search all images with a given tag.
        in: query
        name: tag
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Returns all images from the system that user has access to
      tags:
      - image
    post:
      operationId: image_createImage
      parameters:
      - description: A name of the image.
        in: query
        name: name
        required: false
        type: string
      - description: A description of the image.
        in: query
        name: description
        required: false
        type: string
      - description: Whether the image should be publicly visible. Defaults to True.
        in: query
        name: public
        required: false
        type: boolean
      - description: An icon representing the content of the image.
        in: query
        name: icon
        required: false
        type: string
      - default: false
        description: If "true", tales using this image can be embedded in an iframe
        in: query
        name: iframe
        required: false
        type: boolean
      - description: A human readable labels for the image.
        in: query
        name: tags
        required: false
        type: string
      - description: Default image runtime configuration
        in: query
        name: config
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: Query parameter was invalid
      summary: Create a new image.
      tags:
      - image
  "/image/{id}":
    delete:
      operationId: image_deleteImage
      parameters:
      - description: The ID of the image.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the image.
      summary: Delete an existing image.
      tags:
      - image
    get:
      operationId: image_getImage
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the image.
      summary: Get a image by ID.
      tags:
      - image
    put:
      operationId: image_updateImage
      parameters:
      - description: The ID of the image.
        in: path
        name: id
        required: true
        type: string
      - description: A name of the image.
        in: query
        name: name
        required: false
        type: string
      - description: A description of the image.
        in: query
        name: description
        required: false
        type: string
      - default: true
        description: Whether the image should be publicly visible. Defaults to True.
        in: query
        name: public
        required: false
        type: boolean
      - description: An icon representing the content of the image.
        in: query
        name: icon
        required: false
        type: string
      - default: false
        description: If "true", tales using this image can be embedded in an iframe
        in: query
        name: iframe
        required: false
        type: boolean
      - description: A human readable labels for the image.
        in: query
        name: tags
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read/write access was denied for the image.
        '409':
          description: Tag already exists.
      summary: Update an existing image.
      tags:
      - image
  "/image/{id}/access":
    get:
      operationId: image_getImageAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the image.
      summary: Get the access control list for an image
      tags:
      - image
    put:
      operationId: image_updateImageAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The JSON-encoded access control list.
        in: query
        name: access
        required: true
        type: string
      - description: JSON list of public access flags.
        in: query
        name: publicFlags
        required: false
        type: string
      - description: Whether the image should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the image.
      summary: Update the access control list for an image.
      tags:
      - image
  "/instance":
    get:
      operationId: instance_listInstances
      parameters:
      - description: The ID of the instance's creator.
        in: query
        name: userId
        required: false
        type: string
      - description: List all the instanes using this tale.
        in: query
        name: taleId
        required: false
        type: string
      - description: Perform a full text search for a tale with a matching name.
        in: query
        name: text
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: created
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: -1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Return all the running instances accessible by the user
      tags:
      - instance
    post:
      description: Instantiate a tale.
      operationId: instance_createInstance
      parameters:
      - description: The ID of a tale used to create an instance.
        in: query
        name: taleId
        required: true
        type: string
      - description: A user-friendly, short name of the tale.
        in: query
        name: name
        required: false
        type: string
      - default: true
        description: If false, create only db object without a corresponding container.
        in: query
        name: spawn
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: You have reached a limit for running instances ({}). Please
            shutdown one of the running instances before continuing.
        '403':
          description: Read access was denied for the tale.
      summary: Create a new instance
      tags:
      - instance
  "/instance/{id}":
    delete:
      operationId: instance_deleteInstance
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the instance.
      summary: Delete an existing instance.
      tags:
      - instance
    get:
      operationId: instance_getInstance
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the instance.
      summary: Get an instance by ID.
      tags:
      - instance
    put:
      operationId: instance_updateInstance
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the instance.
      summary: Updates and restarts an existing instance.
      tags:
      - instance
  "/integration/dataone":
    get:
      description: apiToken is currently ignored.
      operationId: integration_dataoneDataImport
      parameters:
      - description: The URI of the dataset. This cna be the landing page, pid, or
          doi.
        in: query
        name: uri
        required: true
        type: string
      - description: The Dataverse database ID of a file the external tool has been
          launched on.
        in: query
        name: title
        required: false
        type: string
      - description: The environment that should be selected.
        in: query
        name: environment
        required: false
        type: string
      - description: An optional API endpoint that should be used to find the dataset.
        in: query
        name: api
        required: false
        type: string
      - description: The DataONE JWT of the user importing the data, if available.
        in: query
        name: apiToken
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Handle a DataONE import request and bounce it to the dashboard.
      tags:
      - integration
  "/integration/dataverse":
    get:
      description: apiToken is currently ignored.
      operationId: integration_dataverseExternalTools
      parameters:
      - description: The Dataverse database ID of a file the external tool has been
          launched on.
        in: query
        name: fileId
        required: true
        type: string
      - description: The URL of the Dataverse installation that hosts the file with
          the fileId above
        in: query
        name: siteUrl
        required: true
        type: string
      - description: The Dataverse API token of the user launching the external tool,
          if available.
        in: query
        name: apiToken
        required: false
        type: string
      - default: true
        description: If True, imports the full dataset that contains the file defined
          by fileId.
        in: query
        name: fullDataset
        required: false
        type: boolean
      responses:
        '200':
          description: Success
      summary: Convert external tools request and bounce it to the dashboard.
      tags:
      - integration
  "/item":
    get:
      description: 'You must pass either a "itemId" or "text" field to specify how
        you are searching for items.  If you omit one of these parameters the request
        will fail and respond : "Invalid search mode."'
      operationId: item_find
      parameters:
      - description: Pass this to list all items in a folder.
        in: query
        name: folderId
        required: false
        type: string
      - description: Pass this to perform a full text search for items.
        in: query
        name: text
        required: false
        type: string
      - description: Pass to lookup an item by exact name match. Must pass folderId
          as well when using this.
        in: query
        name: name
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lowerName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the parent folder.
      summary: List or search for items.
      tags:
      - item
    post:
      operationId: item_createItem
      parameters:
      - description: The ID of the parent folder.
        in: query
        name: folderId
        required: true
        type: string
      - description: Name for the item.
        in: query
        name: name
        required: true
        type: string
      - default: ''
        description: Description for the item.
        in: query
        name: description
        required: false
        type: string
      - default: false
        description: Return existing item (by name) if it exists.
        in: query
        name: reuseExisting
        required: false
        type: boolean
      - description: A JSON object containing the metadata keys to add
        in: formData
        name: metadata
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Write access was denied on the parent folder.
      consumes:
        - multipart/form-data
      summary: Create a new item.
      tags:
      - item
  "/item/{id}":
    delete:
      operationId: item_deleteItem
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the item.
      summary: Delete an item by ID.
      tags:
      - item
    get:
      operationId: item_getItem
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the item.
      consumes:
        - multipart/form-data
      summary: Get an item by ID.
      tags:
      - item
    put:
      operationId: item_updateItem
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Name for the item.
        in: query
        name: name
        required: false
        type: string
      - description: Description for the item.
        in: query
        name: description
        required: false
        type: string
      - description: Pass this to move the item to a new folder.
        in: query
        name: folderId
        required: false
        type: string
      - description: A JSON object containing the metadata keys to add
        in: formData
        name: metadata
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the item or folder.
      consumes:
        - multipart/form-data
      summary: Edit an item or move it to another folder.
      tags:
      - item
  "/item/{id}/copy":
    post:
      description: If no folderId parameter is specified, creates a copy of the item
        in its current containing folder.
      operationId: item_copyItem
      parameters:
      - description: The ID of the original item.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the parent folder.
        in: query
        name: folderId
        required: false
        type: string
      - description: Name for the new item.
        in: query
        name: name
        required: false
        type: string
      - description: Description for the new item.
        in: query
        name: description
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            A parameter was invalid.

            ID was invalid.
        '403':
          description: |-
            Read access was denied on the original item.

            Write access was denied on the parent folder.
      summary: Copy an item.
      tags:
      - item
  "/item/{id}/download":
    get:
      operationId: item_download
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 0
        description: Byte offset into the file.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - description: If unspecified, items with one file are downloaded as that file,
          and other items are downloaded as a zip archive.  If 'zip', a zip archive
          is always sent.
        in: query
        name: format
        required: false
        type: string
      - default: attachment
        description: Specify the Content-Disposition response header disposition-type
          value, only applied for single file items.
        enum:
        - inline
        - attachment
        in: query
        name: contentDisposition
        required: false
        type: string
      - description: Arbitrary data to send along with the download request, only
          applied for single file items.
        in: query
        name: extraParameters
        required: false
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the item.
      summary: Download the contents of an item.
      tags:
      - item
  "/item/{id}/files":
    get:
      operationId: item_getFiles
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the item.
      summary: Get the files within an item.
      tags:
      - item
  "/item/{id}/listing":
    get:
      operationId: item_listItem
      parameters:
      - description: The ID of the folder.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the folder.
      summary: List the content of an item.
      tags:
      - item
  "/item/{id}/metadata":
    delete:
      operationId: item_deleteMetadata
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: A JSON list containing the metadata fields to delete
        in: body
        name: fields
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Invalid JSON passed in request body.

            Metadata key name was invalid.
        '403':
          description: Write access was denied for the item.
      summary: Delete metadata fields on an item.
      tags:
      - item
    put:
      description: Set metadata fields to null in order to delete them.
      operationId: item_setMetadata
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: A JSON object containing the metadata keys to add
        in: body
        name: metadata
        required: true
        schema:
          type: string
      - default: false
        description: Whether "null" is allowed as a metadata value.
        in: query
        name: allowNull
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Invalid JSON passed in request body.

            Metadata key name was invalid.
        '403':
          description: Write access was denied for the item.
      summary: Set metadata fields on an item.
      tags:
      - item
  "/item/{id}/rootpath":
    get:
      operationId: item_rootpath
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the item.
      summary: Get the path to the root of the item's hierarchy.
      tags:
      - item
  "/job":
    get:
      operationId: job_listJobs
      parameters:
      - description: The ID of the user whose jobs will be listed. If not passed or
          empty, will use the currently logged in user. If set to "None", will list
          all jobs that do not have an owning user.
        in: query
        name: userId
        required: false
        type: string
      - description: Id of the parent job.
        in: query
        name: parentId
        required: false
        type: string
      - description: Filter for type
        in: query
        name: types
        required: false
        type: string
      - description: Filter for status
        in: query
        name: statuses
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: created
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: -1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: List jobs for a given user.
      tags:
      - job
    post:
      operationId: job_createJob
      parameters:
      - description: Title of the job.
        in: query
        name: title
        required: true
        type: string
      - description: Type of the job.
        in: query
        name: type
        required: true
        type: string
      - description: ID of the parent job.
        in: query
        name: parentId
        required: false
        type: string
      - default: false
        description: Whether the job is publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      - description: Job handler string.
        in: query
        name: handler
        required: false
        type: string
      - description: Job arguments
        in: query
        name: args
        required: false
        type: string
      - description: Job keyword arguments
        in: query
        name: kwargs
        required: false
        type: string
      - description: Other fields specific to the job handler
        in: query
        name: otherFields
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Create a job model
      tags:
      - job
  "/job/all":
    get:
      operationId: job_listAllJobs
      parameters:
      - description: Filter for type
        in: query
        name: types
        required: false
        type: string
      - description: Filter for status
        in: query
        name: statuses
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: created
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: -1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: List all jobs.
      tags:
      - job
  "/job/typeandstatus":
    get:
      operationId: job_jobsTypesAndStatuses
      responses:
        '200':
          description: Success
      summary: Get types and statuses of jobs of current user
      tags:
      - job
  "/job/typeandstatus/all":
    get:
      operationId: job_allJobsTypesAndStatuses
      responses:
        '200':
          description: Success
        '403':
          description: Admin access was denied for the job.
      summary: Get types and statuses of all jobs
      tags:
      - job
  "/job/{id}":
    delete:
      operationId: job_deleteJob
      parameters:
      - description: The ID of the job.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the job.
      summary: Delete an existing job.
      tags:
      - job
    get:
      operationId: job_getJob
      parameters:
      - description: The ID of the job.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the job.
      summary: Get a job by ID.
      tags:
      - job
    put:
      description: In most cases, regular users should not call this endpoint. It
        will typically be used by a batch processing system to send updates regarding
        the execution of the job. If using a non-user-associated token for authorization,
        the token must be granted the "jobs.job_<id>" scope, where <id> is the ID
        of the job being updated.
      operationId: job_updateJob
      parameters:
      - description: The ID of the job.
        in: path
        name: id
        required: true
        type: string
      - description: A message to add to the job's log field. If you want to overwrite
          any existing log content, pass another parameter "overwrite=true".
        in: query
        name: log
        required: false
        type: string
      - default: false
        description: If passing a log parameter, you may set this to "true" if you
          wish to overwrite the log field rather than append to it.
        in: query
        name: overwrite
        required: false
        type: boolean
      - description: Update the status of the job. See the JobStatus enumeration in
          the constants module in this plugin for the numerical values of each status.
        in: query
        name: status
        required: false
        type: string
      - description: Maximum progress value, set <= 0 to indicate indeterminate progress
          for this job.
        format: float
        in: query
        name: progressTotal
        required: false
        type: number
      - description: Current progress value.
        format: float
        in: query
        name: progressCurrent
        required: false
        type: number
      - description: Current progress message.
        in: query
        name: progressMessage
        required: false
        type: string
      - default: true
        description: If this update should trigger a notification, set this field
          to true.
        in: query
        name: notify
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the job.
      summary: Update an existing job.
      tags:
      - job
  "/job/{id}/cancel":
    put:
      operationId: job_cancelJob
      parameters:
      - description: The ID of the job.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Write access was denied for the job.
      summary: Cancel a job by ID.
      tags:
      - job
  "/job/{id}/result":
    get:
      operationId: job_getJobResult
      parameters:
      - description: The ID of the job.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the job.
      summary: Get output from celery job.
      tags:
      - job
  "/license":
    get:
      description: This endpoint returns a list of all of the Whole Tale supported
        licenses
      operationId: license_get_licenses
      responses:
        '200':
          description: Success
      summary: Returns all of the licenses that can be assigned to a Tale.
      tags:
      - license
  "/notification":
    get:
      description: This endpoint can be used for manual long-polling when SSE support
        is disabled or otherwise unavailable. The events are always returned in chronological
        order.
      operationId: notification_listNotifications
      parameters:
      - description: Filter out events before this date.
        format: date-time
        in: query
        name: since
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not logged in.
      summary: List notification events
      tags:
      - notification
  "/notification/stream":
    get:
      description: This uses long-polling to keep the connection open for several
        minutes at a time (or longer) and should be requested with an EventSource
        object or other SSE-capable client. <p>Notifications are returned within a
        few seconds of when they occur.  When no notification occurs for the timeout
        duration, the stream is closed. <p>This connection can stay open indefinitely
        long.
      operationId: notification_stream
      parameters:
      - default: 300
        description: The duration without a notification before the stream is closed.
        format: int32
        in: query
        name: timeout
        required: false
        type: integer
      - description: Filter out events before this time stamp.
        format: int32
        in: query
        name: since
        required: false
        type: integer
      produces:
      - text/event-stream
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: You are not logged in.
        '503':
          description: The notification stream is not enabled.
      summary: Stream notifications for a given user via the SSE protocol.
      tags:
      - notification
  "/oauth/provider":
    get:
      description: By default, returns an object mapping names of providers to the
        appropriate URL.
      operationId: oauth_listProviders
      parameters:
      - description: Where the user should be redirected upon completion of the OAuth2
          flow.
        in: query
        name: redirect
        required: true
        type: string
      - default: false
        description: Whether to return the providers as an ordered list.
        in: query
        name: list
        required: false
        type: boolean
      responses:
        '200':
          description: Success
      summary: Get the list of enabled OAuth2 providers and their URLs.
      tags:
      - oauth
  "/publish/dataone":
    get:
      description: ''
      operationId: publish_dataonePublish
      parameters:
      - description: The ID of the tale that is going to be published.
        in: query
        name: taleId
        required: true
        type: string
      - description: |-
          The endpoint for the Metacat instance, including the endpoint.
          Example: 'https://dev.nceas.ucsb.edu/knb/d1/mn
        in: query
        name: remoteMemberNode
        required: true
        type: string
      - description: 'The coordinating node that will be managing the package.Example:
          https://cn.dataone.org/cn/v2 or http://cn-stage-2.test.dataone.org/cn/v2'
        in: query
        name: coordinatingNode
        required: true
        type: string
      - description: The user's authentication token for interacting with the DataONE
          API. In DataONE's case, this is the user's JWTtoken.
        in: query
        name: authToken
        required: true
        type: string
      responses:
        '200':
          description: Success
      summary: Publish a tale to a repository running Metacat
      tags:
      - publish
  "/repository/listFiles":
    get:
      description: Given a list of external data identifiers, returns a list of files
        inside along with their sizes
      operationId: repository_listFiles
      parameters:
      - description: List of external datasets identificators.
        in: query
        name: dataId
        required: true
        type: string
      - default: https://cn.dataone.org/cn/v2
        description: The member node base url. This can be used to search datasets
          from custom networks ,such as the DataONE development network.
        in: query
        name: base_url
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Retrieve a list of files and nested packages in a DataONE repository
      tags:
      - repository
  "/repository/lookup":
    get:
      description: Given a list of external data identifiers, returns mapping to specific
        repository along with a basic metadata, such as size, name.
      operationId: repository_lookupData
      parameters:
      - description: List of external datasets identificators.
        in: query
        name: dataId
        required: true
        type: string
      - default: https://cn.dataone.org/cn/v2
        description: The node endpoint url. This can be used to register datasets
          from custom networks, such as the DataONE development network. This can
          be passed in as an ordinary string. Examples include https://dev.nceas.ucsb.edu/knb/d1/mn/v2
          and https://cn.dataone.org/cn/v2
        in: query
        name: base_url
        required: false
        type: string
      responses:
        '200':
          description: Success
      summary: Create data mapping to an external repository.
      tags:
      - repository
  "/resource":
    delete:
      operationId: resource_delete
      parameters:
      - description: 'A JSON-encoded set of resources to delete. Each type is a list
          of ids.  For example: {"item": [(item id 1), (item id2)], "folder": [(folder
          id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupported or unknown resource type.

            Invalid resources format.

            No resources specified.

            Resource not found.
        '403':
          description: Admin access was denied for a resource.
      summary: Delete a set of items, folders, or other resources.
      tags:
      - resource
    get:
      operationId: resource_listResources
      parameters:
      - description: 'A JSON-encoded set of resources to get. Each type is a list
          of ids. Only folders and items may be specified. For example: {"item": [(item
          id 1), (item id2)], "folder": [(folder id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupport or unknown resource type.

            Invalid resources format.

            Resource type not supported.

            No resources specified.

            Resource not found.

            ID was invalid.
      summary: Get a set of items and folders.
      tags:
      - resource
  "/resource/copy":
    post:
      operationId: resource_copyResources
      parameters:
      - description: 'A JSON-encoded set of resources to copy. Each type is a list
          of ids.  Only folders and items may be specified.  For example: {"item":
          [(item id 1), (item id2)], "folder": [(folder id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      - description: Parent type for the new parent of these resources.
        in: query
        name: parentType
        required: true
        type: string
      - description: Parent ID for the new parent of these resources.
        in: query
        name: parentId
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupported or unknown resource type.

            Invalid resources format.

            Resource type not supported.

            No resources specified.

            Resource not found.

            ID was invalid.
      summary: Copy a set of items and folders.
      tags:
      - resource
  "/resource/download":
    get:
      description: This route is also exposed via the POST method because the request
        parameters can be quite long, and encoding them in the URL (as is standard
        when using the GET method) can cause the URL to become too long, which causes
        errors.
      operationId: resource_download
      parameters:
      - description: 'A JSON-encoded set of resources to download. Each type is a
          list of ids. For example: {"item": [(item id 1), (item id 2)], "folder":
          [(folder id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      - default: false
        description: Include any metadata in JSON files in the archive.
        in: query
        name: includeMetadata
        required: false
        type: boolean
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupported or unknown resource type.

            Invalid resources format.

            No resources specified.

            Resource not found.
        '403':
          description: Read access was denied for a resource.
      summary: Download a set of items, folders, collections, and users as a zip archive.
      tags:
      - resource
    post:
      description: This route is also exposed via the POST method because the request
        parameters can be quite long, and encoding them in the URL (as is standard
        when using the GET method) can cause the URL to become too long, which causes
        errors.
      operationId: resource_download_uniq
      parameters:
      - description: 'A JSON-encoded set of resources to download. Each type is a
          list of ids. For example: {"item": [(item id 1), (item id 2)], "folder":
          [(folder id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      - default: false
        description: Include any metadata in JSON files in the archive.
        in: query
        name: includeMetadata
        required: false
        type: boolean
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupported or unknown resource type.

            Invalid resources format.

            No resources specified.

            Resource not found.
        '403':
          description: Read access was denied for a resource.
      summary: Download a set of items, folders, collections, and users as a zip archive.
      tags:
      - resource
  "/resource/lookup":
    get:
      operationId: resource_lookup
      parameters:
      - description: The path of the resource.  The path must be an absolute Unix
          path starting with either "/user/[user name]", for a user's resources or
          "/collection/[collection name]", for resources under a collection.
        in: query
        name: path
        required: true
        type: string
      - default: false
        description: Specify whether to return None instead of throwing an exception
          when path doesn't exist.
        in: query
        name: test
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Path is invalid.

            Path refers to a resource that does not exist.
        '403':
          description: Read access was denied for the resource.
      summary: Look up a resource in the data hierarchy by path.
      tags:
      - resource
  "/resource/move":
    put:
      operationId: resource_moveResources
      parameters:
      - description: 'A JSON-encoded set of resources to move. Each type is a list
          of ids.  Only folders and items may be specified.  For example: {"item":
          [(item id 1), (item id2)], "folder": [(folder id 1)]}.'
        in: query
        name: resources
        required: true
        type: string
      - description: Parent type for the new parent of these resources.
        enum:
        - user
        - collection
        - folder
        in: query
        name: parentType
        required: true
        type: string
      - description: Parent ID for the new parent of these resources.
        in: query
        name: parentId
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: |-
            Unsupported or unknown resource type.

            Invalid resources format.

            Resource type not supported.

            No resources specified.

            Resource not found.

            ID was invalid.
      summary: Move a set of items and folders.
      tags:
      - resource
  "/resource/search":
    get:
      operationId: resource_search
      parameters:
      - description: The search query.
        in: query
        name: q
        required: true
        type: string
      - default: text
        description: The search mode. Can always use either a text search or a prefix-based
          search.
        in: query
        name: mode
        required: false
        type: string
      - description: A JSON list of resource types to search for, e.g. ["user", "folder",
          "item"].
        in: query
        name: types
        required: true
        type: string
      - default: 0
        description: Minimum required access level.
        format: int32
        in: query
        name: level
        required: false
        type: integer
      - default: 10
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '400':
          description: Invalid type list format.
      summary: Search for resources in the system.
      tags:
      - resource
  "/resource/{id}":
    get:
      operationId: resource_getResource
      parameters:
      - description: The ID of the resource.
        in: path
        name: id
        required: true
        type: string
      - description: The type of the resource (item, file, etc.).
        in: query
        name: type
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the resource.
      summary: Get any resource by ID.
      tags:
      - resource
  "/resource/{id}/path":
    get:
      operationId: resource_path
      parameters:
      - description: The ID of the resource.
        in: path
        name: id
        required: true
        type: string
      - description: The type of the resource (item, file, etc.).
        in: query
        name: type
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: |-
            ID was invalid.

            Invalid resource type.
        '403':
          description: Read access was denied for the resource.
      summary: Get path of a resource.
      tags:
      - resource
  "/resource/{id}/timestamp":
    put:
      operationId: resource_setTimestamp
      parameters:
      - description: The ID of the resource.
        in: path
        name: id
        required: true
        type: string
      - description: The type of the resource (item, file, etc.).
        in: query
        name: type
        required: true
        type: string
      - description: The new created timestamp.
        in: query
        name: created
        required: false
        type: string
      - description: The new updated timestamp.
        in: query
        name: updated
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Access was denied for the resource.
      summary: Set the created or updated timestamp for a resource.
      tags:
      - resource
  "/system/access_flag":
    get:
      operationId: system_getAccessFlags
      responses:
        '200':
          description: Success
      summary: List all access flags available in the system.
      tags:
      - system
  "/system/check":
    get:
      description: Must be a system administrator to call this with any mode other
        than basic.
      operationId: system_systemStatus
      parameters:
      - default: basic
        description: Select details to return. "quick" are the details that can be
          answered without much load on the system. "slow" also includes some resource-intensive
          queries.
        enum:
        - basic
        - quick
        - slow
        in: query
        name: mode
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Report the current system status.
      tags:
      - system
    put:
      description: Must be a system administrator to call this.  This verifies and
        corrects some issues, such as incorrect folder sizes.
      operationId: system_systemConsistencyCheck
      parameters:
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Perform a variety of system checks to verify that all is well.
      tags:
      - system
  "/system/configuration":
    get:
      description: Must be a system administrator to call this.
      operationId: system_getConfigurationOption
      parameters:
      - description: The section identifying the configuration option.
        in: query
        name: section
        required: true
        type: string
      - description: The key identifying the configuration option.
        in: query
        name: key
        required: true
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
        '404':
          description: No such option with the given section/key exists.
      summary: Get the value of a system configuration option.
      tags:
      - system
  "/system/log":
    get:
      description: Must be a system administrator to call this.
      operationId: system_getLog
      parameters:
      - default: 4096
        description: Controls how many bytes (from the end of the log) to show. Pass
          0 to show the whole log.
        format: int32
        in: query
        name: bytes
        required: false
        type: integer
      - default: error
        description: Which log to tail.
        enum:
        - error
        - info
        in: query
        name: log
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Show the most recent contents of the server logs.
      tags:
      - system
  "/system/log/level":
    get:
      description: Must be a system administrator to call this.
      operationId: system_getLogLevel
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Get the current log level.
      tags:
      - system
    put:
      description: Must be a system administrator to call this.
      operationId: system_setLogLevel
      parameters:
      - default: INFO
        description: The new level to set.
        enum:
        - CRITICAL
        - ERROR
        - WARNING
        - INFO
        - DEBUG
        in: query
        name: level
        required: true
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Set the current log level.
      tags:
      - system
  "/system/plugins":
    get:
      description: Must be a system administrator to call this.
      operationId: system_getPlugins
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Get the lists of all available and all enabled plugins.
      tags:
      - system
    put:
      description: Must be a system administrator to call this.
      operationId: system_enablePlugins
      parameters:
      - description: JSON array of plugins to enable.
        in: query
        name: plugins
        required: true
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
        '500':
          description: Required dependencies do not exist.
      summary: Set the list of enabled plugins for the system.
      tags:
      - system
  "/system/restart":
    put:
      description: Must be a system administrator to call this.
      operationId: system_restartServer
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Restart the Girder REST server.
      tags:
      - system
  "/system/setting":
    delete:
      description: Must be a system administrator to call this. This is used to explicitly
        restore a setting to its default value.
      operationId: system_unsetSetting
      parameters:
      - description: The key identifying the setting to unset.
        in: query
        name: key
        required: true
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Unset the value for a system setting.
      tags:
      - system
    get:
      description: Must be a system administrator to call this.
      operationId: system_getSetting
      parameters:
      - description: The key identifying this setting.
        in: query
        name: key
        required: false
        type: string
      - description: A JSON list of keys representing a set of settings to return.
        in: query
        name: list
        required: false
        type: string
      - description: If "none", return a null value if a setting is currently the
          default value. If "default", return the default value of the setting(s).
        in: query
        name: default
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Get the value of a system setting, or a list of them.
      tags:
      - system
    put:
      description: Must be a system administrator to call this. If the value passed
        is a valid JSON object, it will be parsed and stored as an object.
      operationId: system_setSetting
      parameters:
      - description: The key identifying this setting.
        in: query
        name: key
        required: false
        type: string
      - description: The value for this setting.
        in: query
        name: value
        required: false
        type: string
      - description: A JSON list of objects with key and value representing a list
          of settings to set.
        in: query
        name: list
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
        '500':
          description: Failed to set system setting.
      summary: Set the value for a system setting, or a list of them.
      tags:
      - system
  "/system/setting/collection_creation_policy/access":
    get:
      description: Get result in the same structure as the access endpoints of collection,
        file, and group
      operationId: system_getCollectionCreationPolicyAccess
      responses:
        '200':
          description: Success
      summary: Get access of content creation policy.
      tags:
      - system
  "/system/uploads":
    delete:
      description: Must be a system administrator to call this. This frees resources
        that were allocated for the uploads and clears the uploads from database.
      operationId: system_discardPartialUploads
      parameters:
      - description: Clear only a specific upload.
        in: query
        name: uploadId
        required: false
        type: string
      - description: Restrict clearing uploads to those started by a specific user.
        in: query
        name: userId
        required: false
        type: string
      - description: Restrict clearing uploads to those within a specific folder or
          item.
        in: query
        name: parentId
        required: false
        type: string
      - description: Restrict clearing uploads within a specific assetstore.
        in: query
        name: assetstoreId
        required: false
        type: string
      - description: Restrict clearing uploads to those that are at least this many
          days old.
        format: float
        in: query
        name: minimumAge
        required: false
        type: number
      - default: true
        description: Some assetstores can have partial uploads that are no longer
          in the Girder database.  If this is True, remove all of them (only filtered
          by assetstoreId).
        in: query
        name: includeUntracked
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
        '500':
          description: Failed to delete upload
      summary: Discard uploads that have not been finished.
      tags:
      - system
    get:
      description: Must be a system administrator to call this.
      operationId: system_getPartialUploads
      parameters:
      - description: List only a specific upload.
        in: query
        name: uploadId
        required: false
        type: string
      - description: Restrict listing uploads to those started by a specific user.
        in: query
        name: userId
        required: false
        type: string
      - description: Restrict listing uploads to those within a specific folder or
          item.
        in: query
        name: parentId
        required: false
        type: string
      - description: Restrict listing uploads within a specific assetstore.
        in: query
        name: assetstoreId
        required: false
        type: string
      - description: Restrict listing uploads to those that are at least this many
          days old.
        format: float
        in: query
        name: minimumAge
        required: false
        type: number
      - default: true
        description: Some assetstores can have partial uploads that are no longer
          in the Girder database.  If this is True, include all of them (only filtered
          by assetstoreId) in the result list.
        in: query
        name: includeUntracked
        required: false
        type: boolean
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: updated
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Get a list of uploads that have not been finished.
      tags:
      - system
  "/system/version":
    get:
      operationId: system_getVersion
      parameters:
      - description: If true, use git to get the version of the server and any plugins
          that are git repositories.  This supplements the usual version information.
        in: query
        name: fromGit
        required: false
        type: boolean
      responses:
        '200':
          description: Success
      summary: Get the version information for this server.
      tags:
      - system
  "/system/web_build":
    post:
      operationId: system_buildWebCode
      parameters:
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      - default: false
        description: Whether to build for development mode.
        in: query
        name: dev
        required: false
        type: boolean
      responses:
        '200':
          description: Success
      summary: Rebuild web client code.
      tags:
      - system
  "/tale":
    get:
      operationId: tale_listTales
      parameters:
      - description: Perform a full text search for Tale with a matching title or
          description.
        in: query
        name: text
        required: false
        type: string
      - description: The ID of the tale's creator.
        in: query
        name: userId
        required: false
        type: string
      - description: The ID of the tale's image.
        in: query
        name: imageId
        required: false
        type: string
      - default: 0
        description: The minimum access level to the Tale.
        enum:
        - -1
        - 0
        - 1
        - 2
        format: int32
        in: query
        name: level
        required: false
        type: integer
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: title
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: -1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Return all the tales accessible to the user
      tags:
      - tale
    post:
      operationId: tale_createTale
      parameters:
      - description: A new tale
        in: body
        name: tale
        required: true
        schema:
          "$ref": "#/definitions/tale"
      responses:
        '200':
          description: Success
        '403':
          description: You are not authorized to create tales.
      summary: Create a new tale.
      tags:
      - tale
  "/tale/import":
    post:
      description: Currently, this task only handles importing raw data. A serialized
        Tale can be sent as the body of the request using an appropriate content-type
        and with the other parameters as part of the query string. The file will be
        stored in a temporary space. However, it is not currently being processed
        in any way.
      operationId: tale_createTaleFromDataset
      parameters:
      - description: The ID of the tale's image.
        in: query
        name: imageId
        required: false
        type: string
      - description: External dataset identifier.
        in: query
        name: url
        required: false
        type: string
      - default: true
        description: If false, create only Tale object without a corresponding Instance.
        in: query
        name: spawn
        required: false
        type: boolean
      - default: false
        description: If True, assume that external dataset is a Tale.
        in: query
        name: asTale
        required: false
        type: boolean
      - description: Optional keyword arguments passed to GET /repository/lookup
        in: query
        name: lookupKwargs
        required: false
        type: string
      - description: Optional keyword arguments passed to POST /tale
        in: query
        name: taleKwargs
        required: false
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: You are not authorized to create tales.
      summary: Create a new tale from an external dataset.
      tags:
      - tale
  "/tale/{id}":
    delete:
      operationId: tale_deleteTale
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Whether to record progress on this task.
        in: query
        name: progress
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the tale.
      summary: Delete an existing tale.
      tags:
      - tale
    get:
      operationId: tale_getTale
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Read access was denied for the tale.
      summary: Get a tale by ID.
      tags:
      - tale
    put:
      operationId: tale_updateTale
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: Updated tale
        in: body
        name: tale
        required: true
        schema:
          "$ref": "#/definitions/tale"
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the tale.
      summary: Update an existing tale.
      tags:
      - tale
  "/tale/{id}/access":
    get:
      operationId: tale_getTaleAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the tale.
      summary: Get the access control list for a tale
      tags:
      - tale
    put:
      operationId: tale_updateTaleAccess
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The JSON-encoded access control list.
        in: query
        name: access
        required: true
        type: string
      - description: JSON list of public access flags.
        in: query
        name: publicFlags
        required: false
        type: string
      - description: Whether the tale should be publicly visible.
        in: query
        name: public
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the tale.
      summary: Update the access control list for a tale.
      tags:
      - tale
  "/tale/{id}/build":
    put:
      operationId: tale_buildImage
      parameters:
      - description: The ID of the Tale.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: If true, force build regardless of workspace changes
        in: query
        name: force
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: Admin access was denied for the tale.
      summary: Build the image for the Tale
      tags:
      - tale
  "/tale/{id}/copy":
    post:
      operationId: tale_copyTale
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You are not authorized to copy this tale.
      summary: Copy a tale.
      tags:
      - tale
  "/tale/{id}/export":
    get:
      operationId: tale_exportTale
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: native
        description: Format of the exported Tale
        enum:
        - bagit
        - native
        in: query
        name: taleFormat
        required: false
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Success
        '403':
          description: You are not authorized to export this tale.
        '404':
          description: ID was invalid.
      summary: Export a tale as a zipfile
      tags:
      - tale
  "/tale/{id}/manifest":
    get:
      operationId: tale_generateManifest
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: If True, folders in Tale's dataSet are recursively expanded to
          items in the 'aggregates' section
        in: query
        name: expandFolders
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
      summary: Generate the Tale manifest
      tags:
      - tale
  "/token/current":
    get:
      operationId: token_currentSession
      responses:
        '200':
          description: Success
      summary: Retrieve the current session information.
      tags:
      - token
  "/token/scopes":
    get:
      operationId: token_listScopes
      responses:
        '200':
          description: Success
      summary: List all token scopes available in the system.
      tags:
      - token
  "/token/session":
    delete:
      description: Attempts to delete your authentication cookie.
      operationId: token_deleteSession
      responses:
        '200':
          description: Success
      summary: Remove a session from the system.
      tags:
      - token
    get:
      description: If you are logged in, this will return a token associated with
        that login.
      operationId: token_getSession
      responses:
        '200':
          description: Success
      summary: Get an anonymous session token for the system.
      tags:
      - token
  "/user":
    get:
      operationId: user_find
      parameters:
      - description: Pass this to perform a full text search for items.
        in: query
        name: text
        required: false
        type: string
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: lastName
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: List or search for users.
      tags:
      - user
    post:
      operationId: user_createUser
      parameters:
      - description: The user's requested login.
        in: query
        name: login
        required: true
        type: string
      - description: The user's email address.
        in: query
        name: email
        required: true
        type: string
      - description: The user's first name.
        in: query
        name: firstName
        required: true
        type: string
      - description: The user's last name.
        in: query
        name: lastName
        required: true
        type: string
      - description: The user's requested password
        in: query
        name: password
        required: true
        type: string
      - default: false
        description: Whether this user should be a site administrator.
        in: query
        name: admin
        required: false
        type: boolean
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid, or the specified login or email already
            exists in the system.
      summary: Create a new user.
      tags:
      - user
  "/user/authentication":
    delete:
      description: Attempts to delete your authentication cookie.
      operationId: user_logout
      responses:
        '200':
          description: Success
      summary: Log out of the system.
      tags:
      - user
    get:
      description: Pass your username and password using HTTP Basic Auth. Sends a
        cookie that should be passed back in future requests.
      operationId: user_login
      parameters:
      - description: A one-time password for this user
        in: header
        name: Girder-OTP
        required: false
        type: string
      responses:
        '200':
          description: Success
        '401':
          description: Missing Authorization header.
        '403':
          description: Invalid login or password.
      summary: Log in to the system.
      tags:
      - user
  "/user/details":
    get:
      operationId: user_getUsersDetails
      responses:
        '200':
          description: Success
        '403':
          description: You are not a system administrator.
      summary: Get detailed information about all users.
      tags:
      - user
  "/user/me":
    get:
      operationId: user_getMe
      responses:
        '200':
          description: Success
      summary: Retrieve the currently logged-in user information.
      tags:
      - user
  "/user/password":
    put:
      operationId: user_changePassword
      parameters:
      - description: Your current password or a temporary access token.
        in: query
        name: old
        required: true
        type: string
      - description: Your new password.
        in: query
        name: new
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: Your new password is invalid.
        '401':
          description: |-
            You are not logged in.

            Your old password is incorrect.
      summary: Change your password.
      tags:
      - user
  "/user/password/temporary":
    put:
      operationId: user_generateTemporaryPassword
      parameters:
      - description: Your email address.
        in: query
        name: email
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: That email does not exist in the system.
      summary: Create a temporary access token for a user.  The user's password is
        not changed.
      tags:
      - user
  "/user/password/temporary/{id}":
    get:
      operationId: user_checkTemporaryPassword
      parameters:
      - description: The user ID to check.
        in: path
        name: id
        required: true
        type: string
      - description: The token to check.
        in: query
        name: token
        required: true
        type: string
      responses:
        '200':
          description: Success
        '401':
          description: The token does not grant temporary access to the specified
            user.
      summary: Check if a specified token is a temporary access token for the specified
        user.  If the token is valid, returns information on the token and user.
      tags:
      - user
  "/user/settings":
    get:
      operationId: user_getUserMetadata
      responses:
        '200':
          description: Success
        '403':
          description: Read access was denied.
      summary: Update the user settings.
      tags:
      - user
    put:
      operationId: user_setUserMetadata
      parameters:
      - description: A JSON object containing the metadata keys to add
        in: body
        name: body
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '403':
          description: Write access was denied.
      summary: Get the user settings.
      tags:
      - user
  "/user/verification":
    post:
      operationId: user_sendVerificationEmail
      parameters:
      - description: Your login or email address.
        in: query
        name: login
        required: true
        type: string
      responses:
        '200':
          description: Success
        '401':
          description: That login is not registered.
      summary: Send verification email.
      tags:
      - user
  "/user/{id}":
    delete:
      operationId: user_deleteUser
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You do not have permission to delete this user.
      summary: Delete a user by ID.
      tags:
      - user
    get:
      operationId: user_getUser
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: ID was invalid.
        '403':
          description: You do not have permission to see this user.
      summary: Get a user by ID.
      tags:
      - user
    put:
      operationId: user_updateUser
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: First name of the user.
        in: query
        name: firstName
        required: true
        type: string
      - description: Last name of the user.
        in: query
        name: lastName
        required: true
        type: string
      - description: The email of the user.
        in: query
        name: email
        required: true
        type: string
      - description: Is the user a site admin (admin access required)
        in: query
        name: admin
        required: false
        type: boolean
      - description: The account status (admin access required)
        enum:
        - pending
        - enabled
        - disabled
        in: query
        name: status
        required: false
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: |-
            You do not have write access for this user.

            Must be an admin to create an admin.
      summary: Update a user's information.
      tags:
      - user
  "/user/{id}/details":
    get:
      operationId: user_getUserDetails
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Read access was denied on the user.
      summary: Get detailed information about a user.
      tags:
      - user
  "/user/{id}/gravatar":
    get:
      operationId: user_getGravatar
      parameters:
      - description: The ID of the user.
        in: path
        name: id
        required: true
        type: string
      - default: 64
        description: Size in pixels for the image (default=64).
        format: int32
        in: query
        name: size
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Redirects to the gravatar image for a user.
      tags:
      - user
  "/user/{id}/otp":
    delete:
      operationId: user_removeOtp
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Admin access was denied on the user.
      summary: Disable one-time passwords for this user.
      tags:
      - user
    post:
      operationId: user_initializeOtp
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Admin access was denied on the user.
      summary: Initiate the enablement of one-time passwords for this user.
      tags:
      - user
    put:
      operationId: user_finalizeOtp
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: A one-time password for this user
        in: header
        name: Girder-OTP
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: A parameter was invalid.
        '403':
          description: Admin access was denied on the user.
      summary: Finalize the enablement of one-time passwords for this user.
      tags:
      - user
  "/user/{id}/password":
    put:
      description: Only administrators may use this endpoint.
      operationId: user_changeUserPassword
      parameters:
      - description: The ID of the document.
        in: path
        name: id
        required: true
        type: string
      - description: The user's new password.
        in: query
        name: password
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: The new password is invalid.
        '403':
          description: You are not an administrator.
      summary: Change a user's password.
      tags:
      - user
  "/user/{id}/verification":
    put:
      operationId: user_verifyEmail
      parameters:
      - description: The user ID to check.
        in: path
        name: id
        required: true
        type: string
      - description: The token to check.
        in: query
        name: token
        required: true
        type: string
      responses:
        '200':
          description: Success
        '401':
          description: The token is invalid or expired.
      summary: Verify an email address using a token.
      tags:
      - user
  "/wholetale":
    get:
      operationId: wholetale_get_wholetale_info
      responses:
        '200':
          description: Success
      summary: Return basic info about Whole Tale plugin
      tags:
      - wholetale
  "/wholetale/citations":
    put:
      description: Hopefully DataCite will still love us, after we hammer their API
      operationId: wholetale_regenerate_citations
      responses:
        '200':
          description: Success
      summary: Regenerate dataSetCitation for all Tales
      tags:
      - wholetale
  "/worker/status":
    get:
      description: Return -1 if the broker is inaccessible.
      operationId: worker_getWorkerStatus
      responses:
        '200':
          description: Success
      summary: Get worker status and task information.
      tags:
      - worker
  "/workspace":
    get:
      operationId: workspace_listWorkspaces
      parameters:
      - description: The ID of the parent Tale's creator.
        in: query
        name: userId
        required: false
        type: string
      - default: 0
        description: The minimum access level to the Tale.
        enum:
        - -1
        - 0
        - 1
        - 2
        format: int32
        in: query
        name: level
        required: false
        type: integer
      - default: 50
        description: Result set size limit.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - default: 0
        description: Offset into result set.
        format: int32
        in: query
        name: offset
        required: false
        type: integer
      - default: name
        description: Field to sort the result set by.
        in: query
        name: sort
        required: false
        type: string
      - default: 1
        description: 'Sort order: 1 for ascending, -1 for descending.'
        enum:
        - 1
        - -1
        format: int32
        in: query
        name: sortdir
        required: false
        type: integer
      responses:
        '200':
          description: Success
      summary: Returns all workspaces that user has access to
      tags:
      - workspace
  "/workspace/{id}":
    get:
      operationId: workspace_getWorkspace
      parameters:
      - description: The ID of a Tale
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Success
        '400':
          description: Tale ID was invalid.
        '403':
          description: Read access was denied for the resource.
      summary: Get the workspace associated with a Tale ID
      tags:
      - workspace
swagger: '2.0'
tags:
- name: homedirpass
- name: api_key
- name: assetstore
- name: collection
- name: dataset
- name: dm
- name: file
- name: folder
- name: group
- name: image
- name: instance
- name: integration
- name: item
- name: job
- name: license
- name: notification
- name: oauth
- name: publish
- name: repository
- name: resource
- name: system
- name: tale
- name: token
- name: user
- name: wholetale
- name: worker
- name: workspace
